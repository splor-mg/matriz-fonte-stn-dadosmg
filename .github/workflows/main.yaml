name: Updated

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Executa de segunda a sexta-feira √†s 07:14 (Bras√≠lia) ‚Üí 10:14 UTC
    - cron:  '14 10 * * 1-5'
  repository_dispatch:
    types: [version-updated]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Lint: garante a qualidade e padroniza√ß√£o do c√≥digo antes de executar etapas posteriores do workflow
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: 'pyproject.toml'
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-ansi
    
    - name: Run Black
      run: poetry run black --check .
    
    - name: Run Flake8
      run: poetry run flake8 .
    
    - name: Run MyPy
      run: poetry run mypy .
    
    - name: Run Pytest
      run: poetry run pytest

  main:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: 'pyproject.toml'
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-ansi
    
    - name: Check package versions
      continue-on-error: true
      run: poetry run pacotes-check-version
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: aidsplormg/${{ github.event.repository.name }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=matriz-stn2025

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          relatorios_version=v0.7.99
          execucao_version=v0.5.27
          reest_version=v0.2.8
          ano_matriz=2025
          docker_tag=matriz-stn2025
          docker_user=aidsplormg
          docker_image=matriz-fonte-stn-dadosmg
        secrets: |
          secret=${{ secrets.GH_PAT }}
        cache-from: type=registry,ref=aidsplormg/${{ github.event.repository.name }}:latest
        cache-to: type=registry,ref=aidsplormg/${{ github.event.repository.name }}:latest,mode=max
    - name: ETL pipeline
      env: 
        CKAN_HOST: ${{ secrets.CKAN_HOST }}
        CKAN_KEY: ${{ secrets.CKAN_KEY }}
        GH_PAT: ${{ secrets.GH_PAT }}
      run: docker run -e GITHUB_TOKEN=$GH_PAT -e CKAN_HOST=$CKAN_HOST -e CKAN_KEY=$CKAN_KEY --mount type=bind,source=${PWD},target=/project aidsplormg/${{ github.event.repository.name }}:latest bash -c "poetry run dpm install && make all"
    - name: Push data package
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        make push
    - name: Workflow failure notification
      uses: JasonEtco/create-an-issue@v2
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        filename: .github/workflow-failure.md

  # Valida√ß√£o: verifica integridade e qualidade dos dados gerados
  validate-data:
    needs: main
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: 'pyproject.toml'
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-ansi
    
    - name: Validate with Frictionless
      run: poetry run frictionless validate datapackage.yaml
    
    - name: Check generated files exist
      run: |
        echo "üîç Verificando se todos os arquivos foram gerados..."
        required_files=(
          "data/matriz_receita.csv"
          "data/matriz_despesa.csv"
          "data/fonte_stn.csv"
          "data/matriz_receita_desc.xlsx"
          "data/matriz_despesa_desc.xlsx"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Arquivo obrigat√≥rio n√£o encontrado: $file"
            exit 1
          else
            echo "‚úÖ $file existe"
          fi
        done
        echo "‚úÖ Todos os arquivos obrigat√≥rios foram gerados"
    
    - name: Validate CSV structure
      run: |
        echo "üîç Validando estrutura dos arquivos CSV..."
        
        # Verificar se CSVs t√™m cabe√ßalho e dados
        for csv in data/matriz_receita.csv data/matriz_despesa.csv data/fonte_stn.csv; do
          echo "Validando $csv..."
          if [ ! -s "$csv" ]; then
            echo "‚ùå $csv est√° vazio"
            exit 1
          fi
          
          # Verificar se tem pelo menos 2 linhas (cabe√ßalho + dados)
          line_count=$(wc -l < "$csv")
          if [ "$line_count" -lt 2 ]; then
            echo "‚ùå $csv tem apenas $line_count linha(s), esperado pelo menos 2"
            exit 1
          fi
          
          echo "‚úÖ $csv tem $line_count linhas"
        done
    
    - name: Validate XLSX files
      run: |
        echo "üîç Validando arquivos XLSX..."
        
        # Verificar se XLSX existem e n√£o est√£o vazios
        for xlsx in data/matriz_receita_desc.xlsx data/matriz_despesa_desc.xlsx; do
          if [ ! -f "$xlsx" ] || [ ! -s "$xlsx" ]; then
            echo "‚ùå $xlsx n√£o existe ou est√° vazio"
            exit 1
          fi
          echo "‚úÖ $xlsx existe e n√£o est√° vazio"
        done
    
    - name: Validate data consistency
      run: |
        echo "üîç Validando consist√™ncia dos dados..."
        
        # Verificar se matriz_receita e matriz_despesa t√™m colunas similares
        receita_cols=$(head -1 data/matriz_receita.csv | tr ',' '\n' | wc -l)
        despesa_cols=$(head -1 data/matriz_despesa.csv | tr ',' '\n' | wc -l)
        
        echo "Matriz receita: $receita_cols colunas"
        echo "Matriz despesa: $despesa_cols colunas"
        
        if [ "$receita_cols" -lt 3 ] || [ "$despesa_cols" -lt 3 ]; then
          echo "‚ùå Arquivos CSV t√™m muito poucas colunas"
          exit 1
        fi
        
        echo "‚úÖ Estrutura dos dados parece consistente"
    
    - name: Data validation summary
      run: |
        echo "üéâ Valida√ß√£o de dados conclu√≠da com sucesso!"
        echo "üìä Arquivos validados:"
        ls -la data/*.csv data/*.xlsx
        echo ""
        echo "üìà Estat√≠sticas:"
        for file in data/*.csv; do
          lines=$(wc -l < "$file")
          echo "  $(basename "$file"): $lines linhas"
        done
