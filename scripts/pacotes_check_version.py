#!/usr/bin/env python3
"""
Script para verificar e atualizar vers√µes dos pacotes DCAF no config.mk
Compara vers√µes atuais com as mais recentes no GitHub
"""

import os
import sys
import re
import requests
from pathlib import Path
from datetime import datetime

class Colors:
    """Cores para output do terminal"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def load_config():
    """Carrega vari√°veis do config.mk"""
    config = {}
    config_file = Path("config.mk")
    
    if not config_file.exists():
        print(f"{Colors.RED}‚ùå Arquivo config.mk n√£o encontrado{Colors.END}")
        sys.exit(1)
    
    with open(config_file, 'r') as f:
        for line in f:
            line = line.strip()
            if '=' in line and not line.startswith('#'):
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip()
    
    return config

def load_env_file():
    """Carrega vari√°veis do arquivo .env, se existir (sem depender de python-dotenv)."""
    env_path = Path('.env')
    if not env_path.exists():
        return
    try:
        with open(env_path, 'r', encoding='utf-8') as f:
            for raw in f:
                line = raw.strip()
                if not line or line.startswith('#'):
                    continue
                if '=' not in line:
                    continue
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'")
                # N√£o sobrescrever se j√° existir
                if key and key not in os.environ:
                    os.environ[key] = value
    except Exception:
        # Silencioso por seguran√ßa; uso opcional
        pass

def get_latest_release(repo_name):
    """Obt√©m a vers√£o mais recente de um reposit√≥rio GitHub"""
    # URLs para releases e tags
    releases_url = f"https://api.github.com/repos/splor-mg/{repo_name}/releases/latest"
    tags_url = f"https://api.github.com/repos/splor-mg/{repo_name}/tags"
    
    # Headers com token se dispon√≠vel
    headers = {"User-Agent": "matriz-fonte-stn-dadosmg-version-check/1.0"}
    github_token = os.getenv('GITHUB_TOKEN') or os.getenv('GH_PAT')
    if github_token:
        headers['Authorization'] = f'token {github_token}'
    
    try:
        # Tentar releases primeiro
        response = requests.get(releases_url, headers=headers, timeout=15)
        if response.status_code == 200:
            data = response.json()
            tag_name = data.get('tag_name', '')
        else:
            # Se n√£o houver releases, buscar tags
            if response.status_code in (401, 403):
                try:
                    msg = response.json().get('message', '')
                except Exception:
                    msg = ''
                print(f"{Colors.YELLOW}‚ö†Ô∏è  Releases de {repo_name} inacess√≠veis (status {response.status_code}). {msg}{Colors.END}")
            response = requests.get(tags_url, headers=headers, timeout=15)
            if response.status_code == 200:
                tags = response.json()
                if tags:
                    # Pegar a primeira tag (mais recente)
                    tag_name = tags[0].get('name', '')
                else:
                    return None
            else:
                try:
                    msg = response.json().get('message', '')
                except Exception:
                    msg = ''
                print(f"{Colors.YELLOW}‚ö†Ô∏è  Reposit√≥rio {repo_name} n√£o encontrado/privado (status {response.status_code}). {msg}{Colors.END}")
                return None
        
        # Garantir que a vers√£o comece com 'v'
        if tag_name and not tag_name.startswith('v'):
            tag_name = f"v{tag_name}"
        
        return tag_name
    except requests.exceptions.RequestException as e:
        print(f"{Colors.YELLOW}‚ö†Ô∏è  Erro ao consultar {repo_name}: {e}{Colors.END}")
        return None
    except Exception as e:
        print(f"{Colors.YELLOW}‚ö†Ô∏è  Erro inesperado ao consultar {repo_name}: {e}{Colors.END}")
        return None

def update_config_mk(config, updates):
    """Atualiza o config.mk com as novas vers√µes"""
    config_file = Path("config.mk")
    
    with open(config_file, 'r') as f:
        lines = f.readlines()
    
    changes_made = False
    
    for package, new_version in updates.items():
        var_name = f"{package.upper()}_VERSION"
        
        # Procurar e atualizar a linha
        for i, line in enumerate(lines):
            if line.startswith(f"{var_name}="):
                old_value = line.split('=', 1)[1].strip()
                if old_value != new_version:
                    lines[i] = f"{var_name}={new_version}\n"
                    print(f"üìù {var_name}: {old_value} ‚Üí {new_version}")
                    changes_made = True
                break
    
    if changes_made:
        # Adicionar coment√°rio de atualiza√ß√£o
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        for i, line in enumerate(lines):
            if line.startswith("# √öltima atualiza√ß√£o:"):
                lines[i] = f"# √öltima atualiza√ß√£o: {timestamp} (auto-update)\n"
                break
        
        # Salvar arquivo atualizado
        with open(config_file, 'w') as f:
            f.writelines(lines)
        
        print(f"{Colors.GREEN}‚úÖ config.mk atualizado com sucesso!{Colors.END}")
        return True
    else:
        print(f"{Colors.BLUE}‚ÑπÔ∏è  Nenhuma atualiza√ß√£o necess√°ria{Colors.END}")
        return False

def check_package_versions():
    """Verifica e atualiza vers√µes dos pacotes DCAF"""
    print(f"{Colors.BLUE}{Colors.BOLD}")
    print("=" * 60)
    print("üì¶ VERIFICA√á√ÉO DE VERS√ïES DOS PACOTES DCAF")
    print("   MATRIZ-FONTE-STN-DADOSMG")
    print("=" * 60)
    print(f"{Colors.END}")
    
    # Verificar se h√° token do GitHub
    github_token = os.getenv('GITHUB_TOKEN')
    if github_token:
        print(f"üîë Usando token do GitHub para acessar reposit√≥rios privados")
    else:
        print(f"‚ö†Ô∏è  GITHUB_TOKEN n√£o encontrado - reposit√≥rios privados podem n√£o ser acess√≠veis")
    print()
    
    # Mapeamento de pacotes
    packages = {
        'relatorios': 'RELATORIOS_VERSION',
        'execucao': 'EXECUCAO_VERSION', 
        'reest': 'REEST_VERSION'
    }
    
    try:
        # Carrega configura√ß√µes atuais
        config = load_config()
        
        print(f"üîç Verificando vers√µes no GitHub...")
        print()
        
        updates = {}
        errors = []
        
        # Verificar cada pacote
        for package, var_name in packages.items():
            current_version = config.get(var_name, 'N√ÉO_DEFINIDO')
            print(f"üì¶ {package}:")
            print(f"   Atual: {current_version}")
            
            # Obter vers√£o mais recente
            latest_version = get_latest_release(package)
            
            if latest_version:
                print(f"   GitHub: {latest_version}")
                
                if current_version != latest_version:
                    updates[package] = latest_version
                    print(f"   {Colors.YELLOW}üîÑ Atualiza√ß√£o dispon√≠vel!{Colors.END}")
                else:
                    print(f"   {Colors.GREEN}‚úÖ J√° est√° atualizado{Colors.END}")
            else:
                print(f"   {Colors.RED}‚ùå N√£o foi poss√≠vel obter vers√£o{Colors.END}")
                errors.append(package)
            
            print()
        
        # Mostrar resumo de erros
        if errors:
            print(f"{Colors.YELLOW}‚ö†Ô∏è  N√£o foi poss√≠vel verificar: {', '.join(errors)}{Colors.END}")
            if not github_token:
                print(f"{Colors.BLUE}üí° Dica: Configure GITHUB_TOKEN para acessar reposit√≥rios privados{Colors.END}")
            print()
        
        # Atualizar config.mk se necess√°rio
        if updates:
            print(f"üîß Atualizando config.mk...")
            updated = update_config_mk(config, updates)
            
            if updated:
                print(f"\n{Colors.GREEN}üéâ Atualiza√ß√µes aplicadas com sucesso!{Colors.END}")
                print(f"üìã Pacotes atualizados: {', '.join(updates.keys())}")
                return True
            else:
                print(f"\n{Colors.RED}‚ùå Erro ao atualizar config.mk{Colors.END}")
                return False
        else:
            if errors and not updates:
                print(f"{Colors.YELLOW}‚ÑπÔ∏è  Nenhuma atualiza√ß√£o poss√≠vel devido a erros de acesso{Colors.END}")
                return False
            else:
                print(f"{Colors.BLUE}‚ÑπÔ∏è  Todos os pacotes verificados j√° est√£o atualizados{Colors.END}")
                return False
            
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio{Colors.END}")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}‚ùå Erro inesperado: {e}{Colors.END}")
        sys.exit(1)

def main():
    """Fun√ß√£o principal"""
    try:
        # Carrega .env se existir
        load_env_file()
        # Verificar se requests est√° dispon√≠vel
        try:
            import requests
        except ImportError:
            print(f"{Colors.RED}‚ùå Biblioteca 'requests' n√£o encontrada{Colors.END}")
            print(f"{Colors.BLUE}üí° Execute: pip install requests{Colors.END}")
            sys.exit(1)
        
        # Executar verifica√ß√£o
        has_updates = check_package_versions()
        
        # Retornar c√≥digo de sa√≠da apropriado
        if has_updates:
            print(f"\n{Colors.GREEN}‚úÖ Script conclu√≠do com atualiza√ß√µes{Colors.END}")
            sys.exit(0)  # Sucesso com mudan√ßas
        else:
            print(f"\n{Colors.BLUE}‚ÑπÔ∏è  Script conclu√≠do sem mudan√ßas{Colors.END}")
            sys.exit(1)  # Sucesso sem mudan√ßas (para o workflow)
            
    except Exception as e:
        print(f"{Colors.RED}‚ùå Erro fatal: {e}{Colors.END}")
        sys.exit(1)

if __name__ == "__main__":
    main()
